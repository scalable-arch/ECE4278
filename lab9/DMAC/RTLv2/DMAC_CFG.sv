//
//
// Generated by Semifore, Inc. csrCompile
//    System Verilog RTL output
//
// Version: 2021.09.01 Build: development Linux 64-bit
//
// Command Line: 
//    /home/ScalableArchiLab/bin/csrCompileLite
//    /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl -c
//    ../DMAC.css -o DMAC_CFG -t sv
//
// Input files: 
//    /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl
//
// Configuration files: 
//    ../DMAC.css
//
// Generated on: Wed Nov 10 08:51:48 2021
//           by: ScalableArchiLab
//

//
// Addressmap: DMAC_CFG
//
//   Bus Protocol: AMBA_3_APB
//   Bus Address Units: bytes
//
//   Access: read-write
//   Offset Units: bytes
//   Word size: 4 bytes
//
module DMAC_CFG (
   output wire [31:0] CH0_DMA_SRC_start_addr,
   output wire [31:0] CH0_DMA_DST_start_addr,
   output wire [15:0] CH0_DMA_LEN_byte_len,
   output wire CH0_DMA_CMD_start,
   output wire [31:0] CH1_DMA_SRC_start_addr,
   output wire [31:0] CH1_DMA_DST_start_addr,
   output wire [15:0] CH1_DMA_LEN_byte_len,
   output wire CH1_DMA_CMD_start,
   output wire [31:0] CH2_DMA_SRC_start_addr,
   output wire [31:0] CH2_DMA_DST_start_addr,
   output wire [15:0] CH2_DMA_LEN_byte_len,
   output wire CH2_DMA_CMD_start,
   output wire [31:0] CH3_DMA_SRC_start_addr,
   output wire [31:0] CH3_DMA_DST_start_addr,
   output wire [15:0] CH3_DMA_LEN_byte_len,
   output wire CH3_DMA_CMD_start,
   output wire PREADY,
   output wire [31:0] PRDATA,
   input  wire CH0_DMA_STATUS_done,
   input  wire CH1_DMA_STATUS_done,
   input  wire CH2_DMA_STATUS_done,
   input  wire CH3_DMA_STATUS_done,
   input  wire PSEL,
   input  wire PWRITE,
   input  wire PENABLE,
   input  wire [10:0] PADDR,
   input  wire [31:0] PWDATA,
   input  wire RESET,
   input  wire PCLK
   );

   // internal net declarations
   reg    [31:0] csr_internal_field_CH0_DMA_SRC_start_addr;
   reg    [31:0] csr_internal_field_CH0_DMA_DST_start_addr;
   reg    [15:0] csr_internal_field_CH0_DMA_LEN_byte_len;
   reg    csr_internal_field_CH0_DMA_CMD_start;
   reg    [31:0] csr_internal_field_CH1_DMA_SRC_start_addr;
   reg    [31:0] csr_internal_field_CH1_DMA_DST_start_addr;
   reg    [15:0] csr_internal_field_CH1_DMA_LEN_byte_len;
   reg    csr_internal_field_CH1_DMA_CMD_start;
   reg    [31:0] csr_internal_field_CH2_DMA_SRC_start_addr;
   reg    [31:0] csr_internal_field_CH2_DMA_DST_start_addr;
   reg    [15:0] csr_internal_field_CH2_DMA_LEN_byte_len;
   reg    csr_internal_field_CH2_DMA_CMD_start;
   reg    [31:0] csr_internal_field_CH3_DMA_SRC_start_addr;
   reg    [31:0] csr_internal_field_CH3_DMA_DST_start_addr;
   reg    [15:0] csr_internal_field_CH3_DMA_LEN_byte_len;
   reg    csr_internal_field_CH3_DMA_CMD_start;

   wire   [31:0] csr_internal_field_DMA_VER_version;
   wire   csr_internal_decode_DMA_VER;
   wire   [31:0] csr_internal_read_value_DMA_VER;
   wire   [31:0] csr_internal_read_bus_DMA_VER;
   wire   [31:0] csr_internal_next_field_CH0_DMA_SRC_start_addr;
   wire   csr_internal_write_access_CH0_DMA_SRC_start_addr;
   wire   csr_internal_decode_CH0_DMA_SRC;
   wire   [31:0] csr_internal_read_value_CH0_DMA_SRC;
   wire   [31:0] csr_internal_read_bus_CH0_DMA_SRC;
   wire   [31:0] csr_internal_next_field_CH0_DMA_DST_start_addr;
   wire   csr_internal_write_access_CH0_DMA_DST_start_addr;
   wire   csr_internal_decode_CH0_DMA_DST;
   wire   [31:0] csr_internal_read_value_CH0_DMA_DST;
   wire   [31:0] csr_internal_read_bus_CH0_DMA_DST;
   wire   [15:0] csr_internal_next_field_CH0_DMA_LEN_byte_len;
   wire   csr_internal_write_access_CH0_DMA_LEN_byte_len;
   wire   csr_internal_decode_CH0_DMA_LEN;
   wire   [31:0] csr_internal_read_value_CH0_DMA_LEN;
   wire   [31:0] csr_internal_read_bus_CH0_DMA_LEN;
   wire   csr_internal_next_field_CH0_DMA_CMD_start;
   wire   csr_internal_write_access_CH0_DMA_CMD_start;
   wire   csr_internal_decode_CH0_DMA_CMD;
   wire   csr_internal_field_CH0_DMA_STATUS_done;
   wire   csr_internal_input_CH0_DMA_STATUS_done;
   wire   csr_internal_decode_CH0_DMA_STATUS;
   wire   [31:0] csr_internal_read_value_CH0_DMA_STATUS;
   wire   [31:0] csr_internal_read_bus_CH0_DMA_STATUS;
   wire   [31:0] csr_internal_next_field_CH1_DMA_SRC_start_addr;
   wire   csr_internal_write_access_CH1_DMA_SRC_start_addr;
   wire   csr_internal_decode_CH1_DMA_SRC;
   wire   [31:0] csr_internal_read_value_CH1_DMA_SRC;
   wire   [31:0] csr_internal_read_bus_CH1_DMA_SRC;
   wire   [31:0] csr_internal_next_field_CH1_DMA_DST_start_addr;
   wire   csr_internal_write_access_CH1_DMA_DST_start_addr;
   wire   csr_internal_decode_CH1_DMA_DST;
   wire   [31:0] csr_internal_read_value_CH1_DMA_DST;
   wire   [31:0] csr_internal_read_bus_CH1_DMA_DST;
   wire   [15:0] csr_internal_next_field_CH1_DMA_LEN_byte_len;
   wire   csr_internal_write_access_CH1_DMA_LEN_byte_len;
   wire   csr_internal_decode_CH1_DMA_LEN;
   wire   [31:0] csr_internal_read_value_CH1_DMA_LEN;
   wire   [31:0] csr_internal_read_bus_CH1_DMA_LEN;
   wire   csr_internal_next_field_CH1_DMA_CMD_start;
   wire   csr_internal_write_access_CH1_DMA_CMD_start;
   wire   csr_internal_decode_CH1_DMA_CMD;
   wire   csr_internal_field_CH1_DMA_STATUS_done;
   wire   csr_internal_input_CH1_DMA_STATUS_done;
   wire   csr_internal_decode_CH1_DMA_STATUS;
   wire   [31:0] csr_internal_read_value_CH1_DMA_STATUS;
   wire   [31:0] csr_internal_read_bus_CH1_DMA_STATUS;
   wire   [31:0] csr_internal_next_field_CH2_DMA_SRC_start_addr;
   wire   csr_internal_write_access_CH2_DMA_SRC_start_addr;
   wire   csr_internal_decode_CH2_DMA_SRC;
   wire   [31:0] csr_internal_read_value_CH2_DMA_SRC;
   wire   [31:0] csr_internal_read_bus_CH2_DMA_SRC;
   wire   [31:0] csr_internal_next_field_CH2_DMA_DST_start_addr;
   wire   csr_internal_write_access_CH2_DMA_DST_start_addr;
   wire   csr_internal_decode_CH2_DMA_DST;
   wire   [31:0] csr_internal_read_value_CH2_DMA_DST;
   wire   [31:0] csr_internal_read_bus_CH2_DMA_DST;
   wire   [15:0] csr_internal_next_field_CH2_DMA_LEN_byte_len;
   wire   csr_internal_write_access_CH2_DMA_LEN_byte_len;
   wire   csr_internal_decode_CH2_DMA_LEN;
   wire   [31:0] csr_internal_read_value_CH2_DMA_LEN;
   wire   [31:0] csr_internal_read_bus_CH2_DMA_LEN;
   wire   csr_internal_next_field_CH2_DMA_CMD_start;
   wire   csr_internal_write_access_CH2_DMA_CMD_start;
   wire   csr_internal_decode_CH2_DMA_CMD;
   wire   csr_internal_field_CH2_DMA_STATUS_done;
   wire   csr_internal_input_CH2_DMA_STATUS_done;
   wire   csr_internal_decode_CH2_DMA_STATUS;
   wire   [31:0] csr_internal_read_value_CH2_DMA_STATUS;
   wire   [31:0] csr_internal_read_bus_CH2_DMA_STATUS;
   wire   [31:0] csr_internal_next_field_CH3_DMA_SRC_start_addr;
   wire   csr_internal_write_access_CH3_DMA_SRC_start_addr;
   wire   csr_internal_decode_CH3_DMA_SRC;
   wire   [31:0] csr_internal_read_value_CH3_DMA_SRC;
   wire   [31:0] csr_internal_read_bus_CH3_DMA_SRC;
   wire   [31:0] csr_internal_next_field_CH3_DMA_DST_start_addr;
   wire   csr_internal_write_access_CH3_DMA_DST_start_addr;
   wire   csr_internal_decode_CH3_DMA_DST;
   wire   [31:0] csr_internal_read_value_CH3_DMA_DST;
   wire   [31:0] csr_internal_read_bus_CH3_DMA_DST;
   wire   [15:0] csr_internal_next_field_CH3_DMA_LEN_byte_len;
   wire   csr_internal_write_access_CH3_DMA_LEN_byte_len;
   wire   csr_internal_decode_CH3_DMA_LEN;
   wire   [31:0] csr_internal_read_value_CH3_DMA_LEN;
   wire   [31:0] csr_internal_read_bus_CH3_DMA_LEN;
   wire   csr_internal_next_field_CH3_DMA_CMD_start;
   wire   csr_internal_write_access_CH3_DMA_CMD_start;
   wire   csr_internal_decode_CH3_DMA_CMD;
   wire   csr_internal_field_CH3_DMA_STATUS_done;
   wire   csr_internal_input_CH3_DMA_STATUS_done;
   wire   csr_internal_decode_CH3_DMA_STATUS;
   wire   [31:0] csr_internal_read_value_CH3_DMA_STATUS;
   wire   [31:0] csr_internal_read_bus_CH3_DMA_STATUS;
   wire   csr_internal_bus_select;
   wire   csr_internal_bus_write_command;
   wire   csr_internal_bus_enable;
   wire   csr_internal_bus_ready;
   wire   [10:0] csr_internal_bus_address;
   wire   [31:0] csr_internal_bus_read_data;
   wire   [31:0] csr_internal_read_data;
   wire   csr_internal_read_access;
   wire   [31:0] csr_internal_bus_write_data;
   wire   csr_internal_write_access;

   //   Bus Protocol: AMBA_3_APB
   //   Bus Address Units: bytes

   assign csr_internal_bus_address = PADDR;
   assign csr_internal_bus_select = PSEL;
   assign csr_internal_bus_write_command = PWRITE;
   assign csr_internal_bus_enable = PENABLE;
   assign csr_internal_bus_write_data = PWDATA;

   assign PREADY = csr_internal_bus_ready;

   assign PRDATA = csr_internal_bus_read_data;

   assign csr_internal_read_access =
      csr_internal_bus_select &
      csr_internal_bus_enable &
      (~csr_internal_bus_write_command);

   assign csr_internal_bus_read_data =
      (csr_internal_read_access) ?
         csr_internal_read_data:
         32'b0;

   assign csr_internal_write_access =
      csr_internal_bus_select &
      csr_internal_bus_enable &
      csr_internal_bus_write_command;

   assign csr_internal_bus_ready =
      csr_internal_bus_select &
      csr_internal_bus_enable;

   // Address Decode
   assign csr_internal_decode_DMA_VER =
      (csr_internal_bus_address[10:2] == 9'h0);
   assign csr_internal_decode_CH0_DMA_SRC =
      (csr_internal_bus_address[10:2] == 9'h40);
   assign csr_internal_decode_CH0_DMA_DST =
      (csr_internal_bus_address[10:2] == 9'h41);
   assign csr_internal_decode_CH0_DMA_LEN =
      (csr_internal_bus_address[10:2] == 9'h42);
   assign csr_internal_decode_CH0_DMA_CMD =
      (csr_internal_bus_address[10:2] == 9'h43);
   assign csr_internal_decode_CH0_DMA_STATUS =
      (csr_internal_bus_address[10:2] == 9'h44);
   assign csr_internal_decode_CH1_DMA_SRC =
      (csr_internal_bus_address[10:2] == 9'h80);
   assign csr_internal_decode_CH1_DMA_DST =
      (csr_internal_bus_address[10:2] == 9'h81);
   assign csr_internal_decode_CH1_DMA_LEN =
      (csr_internal_bus_address[10:2] == 9'h82);
   assign csr_internal_decode_CH1_DMA_CMD =
      (csr_internal_bus_address[10:2] == 9'h83);
   assign csr_internal_decode_CH1_DMA_STATUS =
      (csr_internal_bus_address[10:2] == 9'h84);
   assign csr_internal_decode_CH2_DMA_SRC =
      (csr_internal_bus_address[10:2] == 9'hc0);
   assign csr_internal_decode_CH2_DMA_DST =
      (csr_internal_bus_address[10:2] == 9'hc1);
   assign csr_internal_decode_CH2_DMA_LEN =
      (csr_internal_bus_address[10:2] == 9'hc2);
   assign csr_internal_decode_CH2_DMA_CMD =
      (csr_internal_bus_address[10:2] == 9'hc3);
   assign csr_internal_decode_CH2_DMA_STATUS =
      (csr_internal_bus_address[10:2] == 9'hc4);
   assign csr_internal_decode_CH3_DMA_SRC =
      (csr_internal_bus_address[10:2] == 9'h100);
   assign csr_internal_decode_CH3_DMA_DST =
      (csr_internal_bus_address[10:2] == 9'h101);
   assign csr_internal_decode_CH3_DMA_LEN =
      (csr_internal_bus_address[10:2] == 9'h102);
   assign csr_internal_decode_CH3_DMA_CMD =
      (csr_internal_bus_address[10:2] == 9'h103);
   assign csr_internal_decode_CH3_DMA_STATUS =
      (csr_internal_bus_address[10:2] == 9'h104);


   //
   // Register: DMA_VER
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 74
   // Addressmap Byte Offset: 0x0
   // Access: read-only
   //
   assign csr_internal_read_value_DMA_VER =
      csr_internal_field_DMA_VER_version;
   assign csr_internal_read_bus_DMA_VER =
      csr_internal_read_value_DMA_VER &
      {32{csr_internal_decode_DMA_VER}};

      // Field: DMA_VER.version
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 73
      // Position: [31:0]
      // Access: read-only
      // Type: constant
      assign csr_internal_field_DMA_VER_version = 32'h20101;


   //
   // Register: CH0.DMA_SRC
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 15
   // Addressmap Byte Offset: 0x100
   // Access: read-write
   //
   assign csr_internal_read_value_CH0_DMA_SRC =
      csr_internal_field_CH0_DMA_SRC_start_addr;
   assign csr_internal_read_bus_CH0_DMA_SRC =
      csr_internal_read_value_CH0_DMA_SRC &
      {32{csr_internal_decode_CH0_DMA_SRC}};

      // Field: CH0.DMA_SRC.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 14
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH0_DMA_SRC_start_addr =
         csr_internal_decode_CH0_DMA_SRC &
         csr_internal_write_access;

      assign csr_internal_next_field_CH0_DMA_SRC_start_addr =
         (csr_internal_write_access_CH0_DMA_SRC_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH0_DMA_SRC_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH0_DMA_SRC_start_addr <=
               32'h0;
         else
            csr_internal_field_CH0_DMA_SRC_start_addr <=
               csr_internal_next_field_CH0_DMA_SRC_start_addr;

      assign CH0_DMA_SRC_start_addr =
         csr_internal_field_CH0_DMA_SRC_start_addr;


   //
   // Register: CH0.DMA_DST
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 23
   // Addressmap Byte Offset: 0x104
   // Access: read-write
   //
   assign csr_internal_read_value_CH0_DMA_DST =
      csr_internal_field_CH0_DMA_DST_start_addr;
   assign csr_internal_read_bus_CH0_DMA_DST =
      csr_internal_read_value_CH0_DMA_DST &
      {32{csr_internal_decode_CH0_DMA_DST}};

      // Field: CH0.DMA_DST.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 22
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH0_DMA_DST_start_addr =
         csr_internal_decode_CH0_DMA_DST &
         csr_internal_write_access;

      assign csr_internal_next_field_CH0_DMA_DST_start_addr =
         (csr_internal_write_access_CH0_DMA_DST_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH0_DMA_DST_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH0_DMA_DST_start_addr <=
               32'h0;
         else
            csr_internal_field_CH0_DMA_DST_start_addr <=
               csr_internal_next_field_CH0_DMA_DST_start_addr;

      assign CH0_DMA_DST_start_addr =
         csr_internal_field_CH0_DMA_DST_start_addr;


   //
   // Register: CH0.DMA_LEN
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 32
   // Addressmap Byte Offset: 0x108
   // Access: read-write
   //
   assign csr_internal_read_value_CH0_DMA_LEN =
      {
         16'h0,
         csr_internal_field_CH0_DMA_LEN_byte_len
      };
   assign csr_internal_read_bus_CH0_DMA_LEN =
      csr_internal_read_value_CH0_DMA_LEN &
      {32{csr_internal_decode_CH0_DMA_LEN}};

      // Field: CH0.DMA_LEN.byte_len
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 31
      // Position: [15:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH0_DMA_LEN_byte_len =
         csr_internal_decode_CH0_DMA_LEN &
         csr_internal_write_access;

      assign csr_internal_next_field_CH0_DMA_LEN_byte_len =
         (csr_internal_write_access_CH0_DMA_LEN_byte_len) ?
            csr_internal_bus_write_data[15:0]:
            csr_internal_field_CH0_DMA_LEN_byte_len;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH0_DMA_LEN_byte_len <=
               16'h0;
         else
            csr_internal_field_CH0_DMA_LEN_byte_len <=
               csr_internal_next_field_CH0_DMA_LEN_byte_len;

      assign CH0_DMA_LEN_byte_len =
         csr_internal_field_CH0_DMA_LEN_byte_len;


   //
   // Register: CH0.DMA_CMD
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 44
   // Addressmap Byte Offset: 0x10c
   // Access: write-only
   //

      // Field: CH0.DMA_CMD.start
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 43
      // Position: [0]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_CH0_DMA_CMD_start =
         csr_internal_decode_CH0_DMA_CMD &
         csr_internal_write_access;

      assign csr_internal_next_field_CH0_DMA_CMD_start =
         (csr_internal_write_access_CH0_DMA_CMD_start) ?
            csr_internal_bus_write_data[0]:
            1'h0;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH0_DMA_CMD_start <=
               1'b0;
         else
            csr_internal_field_CH0_DMA_CMD_start <=
               csr_internal_next_field_CH0_DMA_CMD_start;

      assign CH0_DMA_CMD_start =
         csr_internal_field_CH0_DMA_CMD_start;


   //
   // Register: CH0.DMA_STATUS
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 54
   // Addressmap Byte Offset: 0x110
   // Access: read-only
   //
   assign csr_internal_read_value_CH0_DMA_STATUS =
      {
         31'h0,
         csr_internal_field_CH0_DMA_STATUS_done
      };
   assign csr_internal_read_bus_CH0_DMA_STATUS =
      csr_internal_read_value_CH0_DMA_STATUS &
      {32{csr_internal_decode_CH0_DMA_STATUS}};

      // Field: CH0.DMA_STATUS.done
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 53
      // Position: [0]
      // Access: read-only
      // Type: status

      assign csr_internal_input_CH0_DMA_STATUS_done =
         CH0_DMA_STATUS_done;

      assign csr_internal_field_CH0_DMA_STATUS_done =
         csr_internal_input_CH0_DMA_STATUS_done;


   //
   // Register: CH1.DMA_SRC
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 15
   // Addressmap Byte Offset: 0x200
   // Access: read-write
   //
   assign csr_internal_read_value_CH1_DMA_SRC =
      csr_internal_field_CH1_DMA_SRC_start_addr;
   assign csr_internal_read_bus_CH1_DMA_SRC =
      csr_internal_read_value_CH1_DMA_SRC &
      {32{csr_internal_decode_CH1_DMA_SRC}};

      // Field: CH1.DMA_SRC.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 14
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH1_DMA_SRC_start_addr =
         csr_internal_decode_CH1_DMA_SRC &
         csr_internal_write_access;

      assign csr_internal_next_field_CH1_DMA_SRC_start_addr =
         (csr_internal_write_access_CH1_DMA_SRC_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH1_DMA_SRC_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH1_DMA_SRC_start_addr <=
               32'h0;
         else
            csr_internal_field_CH1_DMA_SRC_start_addr <=
               csr_internal_next_field_CH1_DMA_SRC_start_addr;

      assign CH1_DMA_SRC_start_addr =
         csr_internal_field_CH1_DMA_SRC_start_addr;


   //
   // Register: CH1.DMA_DST
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 23
   // Addressmap Byte Offset: 0x204
   // Access: read-write
   //
   assign csr_internal_read_value_CH1_DMA_DST =
      csr_internal_field_CH1_DMA_DST_start_addr;
   assign csr_internal_read_bus_CH1_DMA_DST =
      csr_internal_read_value_CH1_DMA_DST &
      {32{csr_internal_decode_CH1_DMA_DST}};

      // Field: CH1.DMA_DST.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 22
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH1_DMA_DST_start_addr =
         csr_internal_decode_CH1_DMA_DST &
         csr_internal_write_access;

      assign csr_internal_next_field_CH1_DMA_DST_start_addr =
         (csr_internal_write_access_CH1_DMA_DST_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH1_DMA_DST_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH1_DMA_DST_start_addr <=
               32'h0;
         else
            csr_internal_field_CH1_DMA_DST_start_addr <=
               csr_internal_next_field_CH1_DMA_DST_start_addr;

      assign CH1_DMA_DST_start_addr =
         csr_internal_field_CH1_DMA_DST_start_addr;


   //
   // Register: CH1.DMA_LEN
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 32
   // Addressmap Byte Offset: 0x208
   // Access: read-write
   //
   assign csr_internal_read_value_CH1_DMA_LEN =
      {
         16'h0,
         csr_internal_field_CH1_DMA_LEN_byte_len
      };
   assign csr_internal_read_bus_CH1_DMA_LEN =
      csr_internal_read_value_CH1_DMA_LEN &
      {32{csr_internal_decode_CH1_DMA_LEN}};

      // Field: CH1.DMA_LEN.byte_len
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 31
      // Position: [15:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH1_DMA_LEN_byte_len =
         csr_internal_decode_CH1_DMA_LEN &
         csr_internal_write_access;

      assign csr_internal_next_field_CH1_DMA_LEN_byte_len =
         (csr_internal_write_access_CH1_DMA_LEN_byte_len) ?
            csr_internal_bus_write_data[15:0]:
            csr_internal_field_CH1_DMA_LEN_byte_len;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH1_DMA_LEN_byte_len <=
               16'h0;
         else
            csr_internal_field_CH1_DMA_LEN_byte_len <=
               csr_internal_next_field_CH1_DMA_LEN_byte_len;

      assign CH1_DMA_LEN_byte_len =
         csr_internal_field_CH1_DMA_LEN_byte_len;


   //
   // Register: CH1.DMA_CMD
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 44
   // Addressmap Byte Offset: 0x20c
   // Access: write-only
   //

      // Field: CH1.DMA_CMD.start
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 43
      // Position: [0]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_CH1_DMA_CMD_start =
         csr_internal_decode_CH1_DMA_CMD &
         csr_internal_write_access;

      assign csr_internal_next_field_CH1_DMA_CMD_start =
         (csr_internal_write_access_CH1_DMA_CMD_start) ?
            csr_internal_bus_write_data[0]:
            1'h0;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH1_DMA_CMD_start <=
               1'b0;
         else
            csr_internal_field_CH1_DMA_CMD_start <=
               csr_internal_next_field_CH1_DMA_CMD_start;

      assign CH1_DMA_CMD_start =
         csr_internal_field_CH1_DMA_CMD_start;


   //
   // Register: CH1.DMA_STATUS
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 54
   // Addressmap Byte Offset: 0x210
   // Access: read-only
   //
   assign csr_internal_read_value_CH1_DMA_STATUS =
      {
         31'h0,
         csr_internal_field_CH1_DMA_STATUS_done
      };
   assign csr_internal_read_bus_CH1_DMA_STATUS =
      csr_internal_read_value_CH1_DMA_STATUS &
      {32{csr_internal_decode_CH1_DMA_STATUS}};

      // Field: CH1.DMA_STATUS.done
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 53
      // Position: [0]
      // Access: read-only
      // Type: status

      assign csr_internal_input_CH1_DMA_STATUS_done =
         CH1_DMA_STATUS_done;

      assign csr_internal_field_CH1_DMA_STATUS_done =
         csr_internal_input_CH1_DMA_STATUS_done;


   //
   // Register: CH2.DMA_SRC
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 15
   // Addressmap Byte Offset: 0x300
   // Access: read-write
   //
   assign csr_internal_read_value_CH2_DMA_SRC =
      csr_internal_field_CH2_DMA_SRC_start_addr;
   assign csr_internal_read_bus_CH2_DMA_SRC =
      csr_internal_read_value_CH2_DMA_SRC &
      {32{csr_internal_decode_CH2_DMA_SRC}};

      // Field: CH2.DMA_SRC.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 14
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH2_DMA_SRC_start_addr =
         csr_internal_decode_CH2_DMA_SRC &
         csr_internal_write_access;

      assign csr_internal_next_field_CH2_DMA_SRC_start_addr =
         (csr_internal_write_access_CH2_DMA_SRC_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH2_DMA_SRC_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH2_DMA_SRC_start_addr <=
               32'h0;
         else
            csr_internal_field_CH2_DMA_SRC_start_addr <=
               csr_internal_next_field_CH2_DMA_SRC_start_addr;

      assign CH2_DMA_SRC_start_addr =
         csr_internal_field_CH2_DMA_SRC_start_addr;


   //
   // Register: CH2.DMA_DST
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 23
   // Addressmap Byte Offset: 0x304
   // Access: read-write
   //
   assign csr_internal_read_value_CH2_DMA_DST =
      csr_internal_field_CH2_DMA_DST_start_addr;
   assign csr_internal_read_bus_CH2_DMA_DST =
      csr_internal_read_value_CH2_DMA_DST &
      {32{csr_internal_decode_CH2_DMA_DST}};

      // Field: CH2.DMA_DST.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 22
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH2_DMA_DST_start_addr =
         csr_internal_decode_CH2_DMA_DST &
         csr_internal_write_access;

      assign csr_internal_next_field_CH2_DMA_DST_start_addr =
         (csr_internal_write_access_CH2_DMA_DST_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH2_DMA_DST_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH2_DMA_DST_start_addr <=
               32'h0;
         else
            csr_internal_field_CH2_DMA_DST_start_addr <=
               csr_internal_next_field_CH2_DMA_DST_start_addr;

      assign CH2_DMA_DST_start_addr =
         csr_internal_field_CH2_DMA_DST_start_addr;


   //
   // Register: CH2.DMA_LEN
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 32
   // Addressmap Byte Offset: 0x308
   // Access: read-write
   //
   assign csr_internal_read_value_CH2_DMA_LEN =
      {
         16'h0,
         csr_internal_field_CH2_DMA_LEN_byte_len
      };
   assign csr_internal_read_bus_CH2_DMA_LEN =
      csr_internal_read_value_CH2_DMA_LEN &
      {32{csr_internal_decode_CH2_DMA_LEN}};

      // Field: CH2.DMA_LEN.byte_len
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 31
      // Position: [15:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH2_DMA_LEN_byte_len =
         csr_internal_decode_CH2_DMA_LEN &
         csr_internal_write_access;

      assign csr_internal_next_field_CH2_DMA_LEN_byte_len =
         (csr_internal_write_access_CH2_DMA_LEN_byte_len) ?
            csr_internal_bus_write_data[15:0]:
            csr_internal_field_CH2_DMA_LEN_byte_len;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH2_DMA_LEN_byte_len <=
               16'h0;
         else
            csr_internal_field_CH2_DMA_LEN_byte_len <=
               csr_internal_next_field_CH2_DMA_LEN_byte_len;

      assign CH2_DMA_LEN_byte_len =
         csr_internal_field_CH2_DMA_LEN_byte_len;


   //
   // Register: CH2.DMA_CMD
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 44
   // Addressmap Byte Offset: 0x30c
   // Access: write-only
   //

      // Field: CH2.DMA_CMD.start
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 43
      // Position: [0]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_CH2_DMA_CMD_start =
         csr_internal_decode_CH2_DMA_CMD &
         csr_internal_write_access;

      assign csr_internal_next_field_CH2_DMA_CMD_start =
         (csr_internal_write_access_CH2_DMA_CMD_start) ?
            csr_internal_bus_write_data[0]:
            1'h0;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH2_DMA_CMD_start <=
               1'b0;
         else
            csr_internal_field_CH2_DMA_CMD_start <=
               csr_internal_next_field_CH2_DMA_CMD_start;

      assign CH2_DMA_CMD_start =
         csr_internal_field_CH2_DMA_CMD_start;


   //
   // Register: CH2.DMA_STATUS
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 54
   // Addressmap Byte Offset: 0x310
   // Access: read-only
   //
   assign csr_internal_read_value_CH2_DMA_STATUS =
      {
         31'h0,
         csr_internal_field_CH2_DMA_STATUS_done
      };
   assign csr_internal_read_bus_CH2_DMA_STATUS =
      csr_internal_read_value_CH2_DMA_STATUS &
      {32{csr_internal_decode_CH2_DMA_STATUS}};

      // Field: CH2.DMA_STATUS.done
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 53
      // Position: [0]
      // Access: read-only
      // Type: status

      assign csr_internal_input_CH2_DMA_STATUS_done =
         CH2_DMA_STATUS_done;

      assign csr_internal_field_CH2_DMA_STATUS_done =
         csr_internal_input_CH2_DMA_STATUS_done;


   //
   // Register: CH3.DMA_SRC
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 15
   // Addressmap Byte Offset: 0x400
   // Access: read-write
   //
   assign csr_internal_read_value_CH3_DMA_SRC =
      csr_internal_field_CH3_DMA_SRC_start_addr;
   assign csr_internal_read_bus_CH3_DMA_SRC =
      csr_internal_read_value_CH3_DMA_SRC &
      {32{csr_internal_decode_CH3_DMA_SRC}};

      // Field: CH3.DMA_SRC.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 14
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH3_DMA_SRC_start_addr =
         csr_internal_decode_CH3_DMA_SRC &
         csr_internal_write_access;

      assign csr_internal_next_field_CH3_DMA_SRC_start_addr =
         (csr_internal_write_access_CH3_DMA_SRC_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH3_DMA_SRC_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH3_DMA_SRC_start_addr <=
               32'h0;
         else
            csr_internal_field_CH3_DMA_SRC_start_addr <=
               csr_internal_next_field_CH3_DMA_SRC_start_addr;

      assign CH3_DMA_SRC_start_addr =
         csr_internal_field_CH3_DMA_SRC_start_addr;


   //
   // Register: CH3.DMA_DST
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 23
   // Addressmap Byte Offset: 0x404
   // Access: read-write
   //
   assign csr_internal_read_value_CH3_DMA_DST =
      csr_internal_field_CH3_DMA_DST_start_addr;
   assign csr_internal_read_bus_CH3_DMA_DST =
      csr_internal_read_value_CH3_DMA_DST &
      {32{csr_internal_decode_CH3_DMA_DST}};

      // Field: CH3.DMA_DST.start_addr
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 22
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH3_DMA_DST_start_addr =
         csr_internal_decode_CH3_DMA_DST &
         csr_internal_write_access;

      assign csr_internal_next_field_CH3_DMA_DST_start_addr =
         (csr_internal_write_access_CH3_DMA_DST_start_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_CH3_DMA_DST_start_addr;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH3_DMA_DST_start_addr <=
               32'h0;
         else
            csr_internal_field_CH3_DMA_DST_start_addr <=
               csr_internal_next_field_CH3_DMA_DST_start_addr;

      assign CH3_DMA_DST_start_addr =
         csr_internal_field_CH3_DMA_DST_start_addr;


   //
   // Register: CH3.DMA_LEN
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 32
   // Addressmap Byte Offset: 0x408
   // Access: read-write
   //
   assign csr_internal_read_value_CH3_DMA_LEN =
      {
         16'h0,
         csr_internal_field_CH3_DMA_LEN_byte_len
      };
   assign csr_internal_read_bus_CH3_DMA_LEN =
      csr_internal_read_value_CH3_DMA_LEN &
      {32{csr_internal_decode_CH3_DMA_LEN}};

      // Field: CH3.DMA_LEN.byte_len
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 31
      // Position: [15:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_CH3_DMA_LEN_byte_len =
         csr_internal_decode_CH3_DMA_LEN &
         csr_internal_write_access;

      assign csr_internal_next_field_CH3_DMA_LEN_byte_len =
         (csr_internal_write_access_CH3_DMA_LEN_byte_len) ?
            csr_internal_bus_write_data[15:0]:
            csr_internal_field_CH3_DMA_LEN_byte_len;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH3_DMA_LEN_byte_len <=
               16'h0;
         else
            csr_internal_field_CH3_DMA_LEN_byte_len <=
               csr_internal_next_field_CH3_DMA_LEN_byte_len;

      assign CH3_DMA_LEN_byte_len =
         csr_internal_field_CH3_DMA_LEN_byte_len;


   //
   // Register: CH3.DMA_CMD
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 44
   // Addressmap Byte Offset: 0x40c
   // Access: write-only
   //

      // Field: CH3.DMA_CMD.start
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 43
      // Position: [0]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_CH3_DMA_CMD_start =
         csr_internal_decode_CH3_DMA_CMD &
         csr_internal_write_access;

      assign csr_internal_next_field_CH3_DMA_CMD_start =
         (csr_internal_write_access_CH3_DMA_CMD_start) ?
            csr_internal_bus_write_data[0]:
            1'h0;

      always @(posedge PCLK or negedge RESET)
         if (!RESET)
            csr_internal_field_CH3_DMA_CMD_start <=
               1'b0;
         else
            csr_internal_field_CH3_DMA_CMD_start <=
               csr_internal_next_field_CH3_DMA_CMD_start;

      assign CH3_DMA_CMD_start =
         csr_internal_field_CH3_DMA_CMD_start;


   //
   // Register: CH3.DMA_STATUS
   // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 54
   // Addressmap Byte Offset: 0x410
   // Access: read-only
   //
   assign csr_internal_read_value_CH3_DMA_STATUS =
      {
         31'h0,
         csr_internal_field_CH3_DMA_STATUS_done
      };
   assign csr_internal_read_bus_CH3_DMA_STATUS =
      csr_internal_read_value_CH3_DMA_STATUS &
      {32{csr_internal_decode_CH3_DMA_STATUS}};

      // Field: CH3.DMA_STATUS.done
      // Source filename: /home/ScalableArchiLab/ECE4278_devel/lab9/DMAC/RDL/DMAC.v2.rdl, line: 53
      // Position: [0]
      // Access: read-only
      // Type: status

      assign csr_internal_input_CH3_DMA_STATUS_done =
         CH3_DMA_STATUS_done;

      assign csr_internal_field_CH3_DMA_STATUS_done =
         csr_internal_input_CH3_DMA_STATUS_done;


   assign csr_internal_read_data =
      csr_internal_read_bus_DMA_VER |
      csr_internal_read_bus_CH0_DMA_SRC |
      csr_internal_read_bus_CH0_DMA_DST |
      csr_internal_read_bus_CH0_DMA_LEN |
      csr_internal_read_bus_CH0_DMA_STATUS |
      csr_internal_read_bus_CH1_DMA_SRC |
      csr_internal_read_bus_CH1_DMA_DST |
      csr_internal_read_bus_CH1_DMA_LEN |
      csr_internal_read_bus_CH1_DMA_STATUS |
      csr_internal_read_bus_CH2_DMA_SRC |
      csr_internal_read_bus_CH2_DMA_DST |
      csr_internal_read_bus_CH2_DMA_LEN |
      csr_internal_read_bus_CH2_DMA_STATUS |
      csr_internal_read_bus_CH3_DMA_SRC |
      csr_internal_read_bus_CH3_DMA_DST |
      csr_internal_read_bus_CH3_DMA_LEN |
      csr_internal_read_bus_CH3_DMA_STATUS;

endmodule
